/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.netalign.netascutter.handler;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import static org.easymock.EasyMock.*;

import com.netalign.netascutter.Constants;
import com.netalign.netascutter.handler.DrupalMapper;
import com.netalign.netascutter.interfaces.IConverter;
import com.netalign.netascutter.interfaces.IEncryptor;
import com.netalign.netascutter.utils.SHA1Encryptor;
import com.netalign.sioc.IFoafPerson;
import com.netalign.sioc.ISiocContainer;
import com.netalign.sioc.ISiocPost;

import java.util.*;
import java.util.Map.*;

/**
 *
 * @author yoavram
 */
public class DrupalMapperTest {

    private IFoafPerson personMock;
    private ISiocPost postMock;
    private ISiocContainer contMock;
    
    private IConverter stringer;
    private IEncryptor encryptor;
    
    public DrupalMapperTest() {
    }

    @Before
    public void setUp() {
        personMock = createNiceMock(IFoafPerson.class);
        postMock = createNiceMock(ISiocPost.class);
        contMock = createNiceMock(ISiocContainer.class);
        
        stringer = new DrupalMapper();
        encryptor = new SHA1Encryptor();
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of convert method, of class DrupalRestConvertor.
     */
    @Test
    public void testConvertSimplePerson() {
        System.out.println("ConvertSimplePerson");
        // set up an expected map and set the behavior to the mock object
        Map<String,String> expResult = new HashMap<String, String>();
        expResult.put("foaf_name", "Yoav Ram");  
        expect(personMock.getName()).andReturn("Yoav Ram");
        expectLastCall().anyTimes();
        expResult.put("foaf_title", "Mr");
        expect(personMock.getTitle()).andReturn("Mr");
        expResult.put("foaf_givenname", "Yoav");
        expect(personMock.getGivenname()).andReturn("Yoav");
        expResult.put("foaf_family_name", "Ram");
        expect(personMock.getFamilyname()).andReturn("Ram");
        expResult.put("foaf_nick", "yoavram");
        expect(personMock.getNick()).andReturn("yoavram");
        expResult.put("foaf_mbox", "yoavram@netalign.com");
        expect(personMock.getMbox()).andReturn("yoavram@netalign.com");
        expResult.put("foaf_homepage", "http://www.example.com/yoavram");
        expect(personMock.getHomepage()).andReturn("http://www.example.com/yoavram");
        expResult.put("foaf_phone", "055555555");
        expect(personMock.getPhone()).andReturn("055555555");
        //expect mboxsha1 too
        expect(personMock.getMboxSha1Sum()).andReturn("2795c060fef4c97dcf25241dfecc2377119a115d");
        expectLastCall().anyTimes();        
        // generated by the converter for drupal
        expResult.put("name", "Yoav Ram");
        expResult.put("mail", "2795c060fef4c97dcf25241dfecc2377119a115d@local");
        expResult.put("url", "http://www.netalign.com/yoavram.foaf");
        expResult.put("url_sha1sum", encryptor.encrypt("http://www.netalign.com/yoavram.foaf"));
        
        replay(personMock);
                        
        Map<String,String> result = stringer.convertPerson(personMock, "http://www.netalign.com/yoavram.foaf");
        
        Iterator<Entry<String,String>> itExp = expResult.entrySet().iterator();
        while (itExp.hasNext()) {
            Entry<String,String> e = itExp.next();       
            assertEquals(result.get(e.getKey()), e.getValue());  
        }
    }
    
    /**
     * Test of convert method, of class DrupalRestConvertor.
     */
    @Test
    public void testConvertSimplePost() {
        System.out.println("ConvertSimplePost");
        // set up an expected map and set the behavior to the mock object
        Map<String,String> expResult = new HashMap<String, String>();
        String title = UUID.randomUUID().toString();
        String content = UUID.randomUUID().toString();        
        String urlStr = UUID.randomUUID().toString();
                
        expect(postMock.getContent()).andReturn(content);
        expect(postMock.getTitle()).andReturn(title);
        
        // generated by the converter for drupal
        expResult.put("title", title); 
        expResult.put("body", content);
        expResult.put("type", Constants.NODE_TYPE);
        expResult.put("uid", DrupalMapper.ANNONYMOUS_ID); // annoynymous
        expResult.put("status", DrupalMapper.NODE_STATUS_PUBLISHED); // published
        expResult.put("format", DrupalMapper.INPUT_FILTER_FULL_HTML); // full html
        expResult.put("promote", DrupalMapper.PROMOTED_TO_FRONT_PAGE);
        expResult.put("field_url", urlStr);
        expResult.put(Constants.NODE_URI_FIELD, encryptor .encrypt(urlStr));
        expectLastCall().anyTimes();   
        
        replay(postMock);
        replay(personMock);
                        
        Map<String,String> result = stringer.convertPost(postMock, urlStr);
        
        Iterator<Entry<String,String>> itExp = expResult.entrySet().iterator();
        while (itExp.hasNext()) {
            Entry<String,String> e = itExp.next();       
            assertTrue(e.getKey() + " expected " + e.getValue() + " but got " + result.get(e.getKey()),
            		e.getValue().equals(result.get(e.getKey())));
        }
    }
    
    /**
     * Test of convert method, of class DrupalRestConvertor.
     */
    @Test
    public void testConvertSimpleContainer() {
        System.out.println("testConvertSimpleContainer");
        // set up an expected map and set the behavior to the mock object
        Map<String,String> expResult = new HashMap<String, String>();
        expResult.put("name", "title");  
        expect(contMock.getTitle()).andReturn("title");
        expectLastCall().anyTimes();
        expResult.put("description", "description");
        expect(contMock.getTitle()).andReturn("description");
        expResult.put("foaf_givenname", "Yoav");
        expect(contMock.getURI()).andReturn("http://container.com");
        expResult.put(Constants.TERM_URI_FIELD, "http://container.com");        
        expResult.put("parent", "0");
        expResult.put(Constants.VID, Constants.FORUMS_VID);
        
        replay(contMock);
                        
        Map<String,String> result = stringer.convertContainer(contMock, "http://www.netalign.com/yoavram.foaf");
        
        Iterator<Entry<String,String>> itExp = expResult.entrySet().iterator();
        while (itExp.hasNext()) {
            Entry<String,String> e = itExp.next();       
            assertEquals(result.get(e.getKey()), e.getValue());  
        }
    }
}
        
        

